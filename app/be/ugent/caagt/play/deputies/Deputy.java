/*
 * Deputy.java
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * Copyright Â© 2022-2024 Kris Coolsaet (Universiteit Gent)
 *
 * This software is distributed under the MIT License - see files LICENSE and AUTHORS
 * in the top level project directory.
 */

package be.ugent.caagt.play.deputies;

import be.ugent.caagt.play.controllers.Controller;
import be.ugent.caagt.play.util.I18nData;
import com.typesafe.config.Config;
import play.data.Form;
import play.data.FormFactory;
import play.i18n.Messages;
import play.i18n.MessagesApi;
import play.mvc.Call;
import play.mvc.Http;
import play.mvc.Result;
import play.mvc.Results;
import play.twirl.api.Content;

import java.util.Arrays;
import java.util.Locale;
import java.util.Map;

/**
 * Handles an action in a thread safe way. Holds state for an action. Provides some
 * common utility methods and fields.
 */
public class Deputy {

    protected Http.Request request;

    protected MessagesApi messagesApi;

    protected Config config;

    private FormFactory formFactory;

    private Controller<?> parent;

    public Deputy() {

    }

    public void setRequest(Http.Request request) {
        this.request = request;
    }

    public void setMessagesApi(MessagesApi messagesApi) {
        this.messagesApi = messagesApi;
    }

    public void setConfig(Config config) {
        this.config = config;
    }

    public void setFormFactory(FormFactory formFactory) {
        this.formFactory = formFactory;
    }

    public void setParent(Controller<?> parent) {
        this.parent = parent;
    }

    public Http.Request getRequest() {
        return request;
    }

    public String getFlash(String key) {
        return request.asScala().flash().apply(key);
    }

    public scala.Option<String> getFlashOption(String key) {
        return request.asScala().flash().get(key);
    }

    public MessagesApi getMessagesApi() {
        return messagesApi;
    }

    public Messages getMessages() {
        return messagesApi.preferred(request);
    }

    public Config getConfig() {
        return config;
    }

    /**
     * Return the preferred Locale for the current request
     */
    public Locale getLocale() {
        return messagesApi.preferred(request).lang().toLocale();
    }

    /**
     * Retrieves an internationalized message from the messages files
     */
    protected String i18n(String message, Object... args) {
        return messagesApi.preferred(request).at(message, args);
    }

    /**
     * Retrieves an internationalized message from the messages files
     */
    protected String i18n(I18nData data) {
        return i18n(data.key(), data.args());
    }

    /**
     * Transforms each result generated by this deputy, except a redirect. Can be overridden
     * by subclasses.
     * <p>
     * This implementation is empty.
     */
    protected Result transform(Result result) {
        return result;
            //.withHeader("Cache-Control", "no-store, max-age=0");
    }

    /**
     * Transforms each redirect result generated by this deputy. Can be overridden
     * by subclasses.
     * <p>
     * This implementation is empty.
     */
    protected Result transformRedirect(Result result) {
        return result;
            //.withHeader("Cache-Control", "no-store, max-age=0");
    }

    protected Result ok(Content content) {
        return transform(Results.ok(content));
    }

    protected Result ok(String str) {
        return transform(Results.ok(str));
    }

    protected Result ok() {
        return transform(Results.ok());
    }

    protected Result ok(byte[] bytes) {
        return transform(Results.ok(bytes));
    }

    protected Result badRequest(Content content) {
        return transform(Results.badRequest(content));
    }

    protected Result badRequest(String str) {
        return transform(Results.badRequest(str));
    }

    protected Result badRequest() {
        return transform(Results.badRequest());
    }

    protected Result redirect(Call call) {
        return transformRedirect(Results.redirect(call));
    }

    /**
     * Retrieves and binds a form from the current request
     */
    protected <D> Form<D> formFromRequest(Class<D> dataClass) {
        return emptyForm(dataClass).bindFromRequest(request);
    }

    /**
     * Constructs an empty form
     */
    protected <D> Form<D> emptyForm(Class<D> dataClass) {
        return formFactory.form(dataClass);
    }

    /**
     * Constructs a form from data
     */
    protected <D> Form<D> formFromData(D data) {
        @SuppressWarnings("unchecked")
        Class<D> clazz = (Class<D>) data.getClass();
        return emptyForm(clazz).fill(data);
    }

    /**
     * Adds an internationalized error to a form
     */
    protected <D> Form<D> formWithError(Form<D> form, String fieldName, I18nData i18nData) {
        return form.withError(fieldName, i18nData.key(), i18nData.argsAsList());
    }

    protected <D> Form<D> formWithError(Form<D> form, String fieldName, String key, Object... args) {
        return form.withError(fieldName, key, Arrays.asList(args));
    }

    /**
     * Returns a 'dynamic' form as a map of strings
     */
    protected Map<String, String> mapFromRequest() {
        return formFactory.form().bindFromRequest(request).rawData();
    }

    /**
     * Returns a value from the session. Throws an exception if not found
     */
    public String getFromSession (String key) {
        return request.session().get(key).orElseThrow();
    }

    /**
     * Returns a value from the session, or null if not found
     */
    public String findInSession (String key) {
        return request.session().get(key).orElse(null);
    }
}
